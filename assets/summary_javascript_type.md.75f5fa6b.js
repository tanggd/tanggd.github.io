import{o as n,c as s,e as a}from"./app.17264aa3.js";const p='{"title":"JS类型","description":"","frontmatter":{},"headers":[{"level":2,"title":"值类型","slug":"值类型"},{"level":3,"title":"Undefined","slug":"undefined"},{"level":3,"title":"Null","slug":"null"},{"level":3,"title":"Boolean","slug":"boolean"},{"level":3,"title":"String","slug":"string"},{"level":3,"title":"Number","slug":"number"},{"level":3,"title":"Symbol","slug":"symbol"},{"level":2,"title":"引用类型","slug":"引用类型"},{"level":3,"title":"Object","slug":"object"},{"level":2,"title":"类型判断","slug":"类型判断"}],"relativePath":"summary/javascript/type.md","lastUpdated":1633616877889}',t={},o=[a('<h1 id="js类型"><a class="header-anchor" href="#js类型" aria-hidden="true">#</a> JS类型</h1><p>总体来说分为2大类型：</p><ul><li>值类型 <ol><li>Undefined</li><li>Null</li><li>Boolean</li><li>String</li><li>Number</li><li>Symbol</li></ol></li><li>引用类型 <ol><li>Object</li><li>Function</li></ol></li></ul><h2 id="值类型"><a class="header-anchor" href="#值类型" aria-hidden="true">#</a> 值类型</h2><p>值类型，也叫简单类型、原始类型。</p><h3 id="undefined"><a class="header-anchor" href="#undefined" aria-hidden="true">#</a> Undefined</h3><p><code>Undefined </code>类型表示未定义，该类型只有一个值 <code>undefined</code>。</p><p>任何类型的变量在赋值前都是<code>Undefined </code>类型。</p><p>需要注意的是，在 <code>JS</code> 中，<code>undefined</code> 并<strong>不是关键字</strong>，它可以作为一个变量来使用，有时可能获取到的 <code>undefined</code> 并不是我们想要的值，为了避免值被篡改，建议使用 <code>void 0</code> 来表示<code>undefined</code> 。</p><div class="language-javascript line-numbers-mode"><pre><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印 123</span>\n<span class="token punctuation">}</span>\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 正确姿势</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>undefined</code> 并不是关键字，可以作为一个变量来使用，这是<code>JS</code><strong>语言设计败笔之一</strong>。</p><p>相关问题：</p><ul><li>为什么建议使用void 0代替undefined？</li></ul><h3 id="null"><a class="header-anchor" href="#null" aria-hidden="true">#</a> Null</h3><p><code>Null</code> 类型表示定义了但是是空，即空值，该类型只有一个值 <code>null</code>。</p><p><code>null</code> 是关键字，不会出现 <code>undefined</code> 这样的问题。</p><p>相关问题：</p><ul><li>typeof null的值是什么？为什么？</li><li>如何判断变量的值是null或者不是null？</li></ul><h3 id="boolean"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> Boolean</h3><p><code>Boolean</code> 表示逻辑意义上的真假，该类型有2个值：<code>true</code> 和 <code>false</code>。</p><h3 id="string"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3><p><code>String</code> 类型是用来表示文本数据的。</p><p><code>String</code> 有最大长度，值为 <strong>2^53-1</strong>。</p><p>JS中的字符串方法chartAt、chartCodeAt、length等方法针对的都是UTF16编码。</p><p>字符串的最大编码是受字符串编码长度影响的。</p><div class="tip custom-block"><p class="custom-block-title">Note:</p><p>现行的字符集国际标准，字符是以 Unicode 的方式表示的，每一个 Unicode 的码点表示一个字符，理论上，Unicode 的范围是无限的。UTF 是 Unicode 的编码方式，规定了码点在计算机中的表示方法，常见的有 UTF16 和 UTF8。 Unicode 的码点通常用 U+??? 来表示，其中 ??? 是十六进制的码点值。 0-65536（U+0000 - U+FFFF）的码点被称为基本字符区域（BMP）。</p></div><p>js字符串把每个UTF16单元当做一个字符来处理，所以在处理非BMP（超出U+0000 - U+FFFF范围）的字符时，需要特别注意。</p><p>相关问题：</p><ul><li>如何获取一个字符串的字符长度？为什么不能直接用length？</li></ul><h3 id="number"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number</h3><p>Number类型是用来表示数字的。</p><p>js中Number类型的值有2^64-2^53+3个。</p><p>js中Number类型基本符合IEEE754-2008规定的双精度浮点数规则。</p><p>几个特殊的数字：</p><ul><li>NaN：Not a Number，不是一个数字，它在Number类型中也占用了一个值9007199254740990，NaN与任何值都不相等，包括NaN本身。</li><li>Infinity：无穷大。</li><li>-Infinity：负无穷大。</li></ul><p>根据双精度浮点数的定义，Number类型中整数有效的范围是 -0x1fffffffffffff 至 0x1fffffffffffff，范围之外无法精确表示。另外，非整数的Number类型是不能用==或===来比较的，经典问题：0.1+0.2===0.3？</p><div class="language-javascript line-numbers-mode"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">==</span> <span class="token number">0.3</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>由于浮点数运算的精度问题而导致的等式两边不相等。</p><p>我们可以采用这样的方法来比较浮点数：检查等式两边的差的绝对值是否小于等于最小精度（<code>Number.EPSILON</code>），若是小于则表示他们相等，否则不相等。</p><div class="language-javascript line-numbers-mode"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">-</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>注意点：</p><ul><li><p>+0和-0的区别</p><p>在加减计算中，他们没有区别；但是在乘除中有区别。</p></li></ul><div class="language-javascript line-numbers-mode"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">*</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">*</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// -0</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// Infinity</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// -Infinity</span>\n<span class="token comment">// 根据这个结果，我们可以用来判断一个变量是0还是-0</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>Number方法</li></ul><div class="language-javascript line-numbers-mode"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;tang&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 3</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 3</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;tang&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ul><li>isNaN函数</li></ul><div class="language-javascript line-numbers-mode"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false  被转换为了数字1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;tang&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false  被转换为了数字1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false  被转换为了数字0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;tang&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>isNaN用来检测一个变量是不是Number类型。它接受任何参数。</p><p>如果参数是Number类型，直接判断；如果参数不是Number类型，则会使用Number()方法把参数转为Number类型，然后再判断。</p><ul><li><p><code>parseInt()</code> 方法</p><p>取整。</p></li></ul><div class="language-javascript line-numbers-mode"><pre><code><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>  <span class="token comment">// 123</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 123</span>\n\n<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token number">123.456</span><span class="token punctuation">)</span>  <span class="token comment">// 123</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;123.456&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 123</span>\n\n<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;123abc&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 123</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;123.456abc&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 123</span>\n\n<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span>\n<span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&quot;abc123&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li><p><code>parseFloat()</code></p><p>浮点数</p></li></ul><div class="language-javascript line-numbers-mode"><pre><code><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>  <span class="token comment">// 123</span>\n<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 123</span>\n\n<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token number">123.456</span><span class="token punctuation">)</span>  <span class="token comment">// 123.456</span>\n<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;123.456&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 123.456</span>\n\n<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;123abc&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 123</span>\n<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;123.456abc&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 123.456</span>\n\n<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span>\n<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">&quot;abc123&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// NaN</span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="symbol"><a class="header-anchor" href="#symbol" aria-hidden="true">#</a> Symbol</h3><h2 id="引用类型"><a class="header-anchor" href="#引用类型" aria-hidden="true">#</a> 引用类型</h2><p>引用类型，也叫复杂类型、对象类型。</p><h3 id="object"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h3><h2 id="类型判断"><a class="header-anchor" href="#类型判断" aria-hidden="true">#</a> 类型判断</h2>',58)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export{p as __pageData,t as default};
